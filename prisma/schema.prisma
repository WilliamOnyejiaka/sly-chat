generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  VENDOR
  CUSTOMER
  ADMIN
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            Int
  firstName         String
  lastName          String
  email             String
  verified          Boolean
  active            Boolean
  userType          UserType
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  profilePictureUrl String?
}

enum SenderType {
  VENDOR
  CUSTOMER
}

model SupportChat {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  resolved       Boolean   @default(false)
  userId         Int
  userType       UserType
  userProfilePic String?
  supportAgentId Int
  supportAgents  String[]
  lastMessageAt  DateTime  @default(now())
  messages       Message[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Chat {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  productId          String
  vendorId           Int
  customerId         Int
  productImageUrl    String
  productPrice       String
  productName        String
  storeLogoUrl       String?
  customerProfilePic String?
  customerName       String
  storeName          String
  lastMessageAt      DateTime  @default(now())
  messages           Message[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Message {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  senderId        Int
  senderType      SenderType
  text            String?
  timestamp       DateTime       @default(now())
  read            Boolean        @default(false)
  recipientOnline Boolean        @default(false)
  chatId          String?        @db.ObjectId
  chat            Chat?          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  messageMedias   MessageMedia[]
  supportChat     SupportChat?   @relation(fields: [supportChatId], references: [id])
  supportChatId   String?        @db.ObjectId
}

model MessageMedia {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl  String
  publicId  String
  mimeType  String
  size      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String   @db.ObjectId
  Message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}
