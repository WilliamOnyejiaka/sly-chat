generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  VENDOR
  CUSTOMER
  ADMIN
}

model User {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  userId            Int
  firstName         String
  lastName          String
  email             String
  verified          Boolean
  active            Boolean
  userType          UserType
  phoneNumber       String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  profilePictureUrl String?
  Store             Store[]
  StoreFollower     StoreFollower[]

  @@unique([userId, userType])
}

model Store {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String          @unique
  vendorId      Int             @unique
  storeId       Int             @unique
  userType      UserType        @default(VENDOR)
  user          User            @relation(fields: [vendorId, userType], references: [userId, userType], onDelete: Cascade)
  storeLogoUrl  String?
  createdAt     DateTime
  updatedAt     DateTime
  StoreFollower StoreFollower[]
}

enum SenderType {
  VENDOR
  CUSTOMER
  ADMIN
}

model SupportChat {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  resolved       Boolean   @default(false)
  open           Boolean   @default(true)
  userId         Int
  userType       UserType
  userProfilePic String?
  supportAgentId Int
  supportAgents  String[]
  lastMessageAt  DateTime  @default(now())
  messages       Message[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Chat {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  productId          String
  vendorId           Int
  customerId         Int
  productImageUrl    String
  productPrice       String
  productName        String
  storeLogoUrl       String?
  customerProfilePic String?
  customerName       String
  storeName          String
  lastMessageAt      DateTime  @default(now())
  messages           Message[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Message {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  senderId        Int
  senderType      SenderType
  text            String?
  timestamp       DateTime       @default(now())
  read            Boolean        @default(false)
  recipientOnline Boolean        @default(false)
  chatId          String?        @db.ObjectId
  chat            Chat?          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  messageMedias   MessageMedia[]
  supportChat     SupportChat?   @relation(fields: [supportChatId], references: [id])
  supportChatId   String?        @db.ObjectId
}

model MessageMedia {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  publicId  String
  mimeType  String
  size      String
  thumbnail String?
  duration  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String   @db.ObjectId
  Message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model ProductComment {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  productId   Int              @unique
  // userId    String    @db.ObjectId
  // authorId      String      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  userType    UserType
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  parentId    String?          @default("") @db.ObjectId
  parent      ProductComment?  @relation("ProductCommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     ProductComment[] @relation("ProductCommentReplies")
  // User      User      @relation(fields: [userId], references: [id])
  CommentLike CommentLike[]
}

model CommentLike {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  userId    Int
  userType  UserType
  commentId String          @db.ObjectId
  comment   ProductComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([userId, commentId, userType])
}

model ProductLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    Int
  userType  UserType
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId, userType])
}

model StoreFollower {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId    Int
  store      Store    @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  customerId Int
  userType   UserType @default(CUSTOMER)
  user       User     @relation(fields: [customerId, userType], references: [userId, userType], onDelete: Cascade)

  @@unique([storeId, customerId])
}