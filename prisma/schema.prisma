generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  VENDOR
  CUSTOMER
  ADMIN
}

model Customer {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  userId            Int            @unique
  firstName         String
  lastName          String
  email             String
  verified          Boolean
  active            Boolean
  phoneNumber       String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  profilePictureUrl String?
  chat              Chat[]
  Notification      Notification[]
}

model Vendor {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  userId            Int            @unique
  firstName         String
  lastName          String
  email             String
  verified          Boolean
  active            Boolean
  phoneNumber       String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  profilePictureUrl String?
  store             Store[]
  chat              Chat[]
  Notification      Notification[]
}

model Store {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   @unique
  vendorId     Int      @unique
  storeId      Int      @unique
  storeLogoUrl String?
  createdAt    DateTime
  updatedAt    DateTime
  vendor       Vendor   @relation(fields: [vendorId], references: [userId], onDelete: Cascade)
  chat         Chat[]
}

enum SenderType {
  VENDOR
  CUSTOMER
  ADMIN
}

model SupportChat {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  resolved       Boolean   @default(false)
  open           Boolean   @default(true)
  userId         Int
  userType       UserType
  userProfilePic String?
  supportAgentId Int
  supportAgents  String[]
  lastMessageAt  DateTime  @default(now())
  messages       Message[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Chat {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  productId     Int
  vendorId      Int
  customerId    Int
  // storeId       Int
  lastMessageAt DateTime  @default(now())
  messages      Message[]
  createdAt     DateTime  @default(now())
  // store         Store     @relation(fields: [storeId], references: [storeId])
  vendor        Vendor    @relation(fields: [vendorId], references: [userId], onDelete: Cascade)
  customer      Customer  @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  Store         Store?    @relation(fields: [storeId], references: [id])
  storeId       String?   @db.ObjectId
}

model Message {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  senderId        Int
  senderType      SenderType
  text            String?
  timestamp       DateTime       @default(now())
  read            Boolean        @default(false)
  recipientOnline Boolean        @default(false)
  chatId          String?        @db.ObjectId
  chat            Chat?          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  messageMedias   MessageMedia[]
  supportChat     SupportChat?   @relation(fields: [supportChatId], references: [id], onDelete: Cascade)
  supportChatId   String?        @db.ObjectId
}

model MessageMedia {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  publicId  String
  mimeType  String
  size      String
  thumbnail String?
  duration  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String   @db.ObjectId
  Message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

enum NotificationChannel {
  EMAIL
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  VIEWED
}

model Notification {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  vendorId   Int?
  customerId Int?
  type       String
  channel    NotificationChannel @default(PUSH)
  content    Json
  status     NotificationStatus  @default(PENDING)
  priority   Int                 @default(1)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  vendor     Vendor?             @relation(fields: [vendorId], references: [userId], onDelete: Cascade)
  customer   Customer?           @relation(fields: [customerId], references: [userId], onDelete: Cascade)

  @@index([vendorId])
  @@index([customerId])
}
